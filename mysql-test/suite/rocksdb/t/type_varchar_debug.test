#
# VARCHAR encoding tests that require debug support
#
--source include/have_rocksdb.inc
--source include/have_debug.inc

--disable_warnings
drop table if exists t1,t2;
--enable_warnings


set session debug= "+d,myrocks_enable_unknown_collation_index_only_scans";

--let $character_set_collate=CHARACTER SET utf8 COLLATE utf8_general_ci
--source type_varchar_endspace.inc

set session debug= "-d,myrocks_enable_unknown_collation_index_only_scans";

--echo #
--echo # Check backwards compatibility: 
--echo #

set session debug= '+d,MYROCKS_FORMAT_VERSION_INITIAL';

--echo # Create the tables in the old format

create table t1 (
  pk varchar(64) collate latin1_bin,
  col1 varchar(64),
  primary key (pk)
);
insert into t1 values ('a','a');
--echo # The following will not produce an error:
insert into t1 values ('a ', 'a-space');
select pk, hex(pk), col1 from t1;

create table t2 (
  pk int not null primary key,
  col1 varchar(64) collate latin1_bin,
  col2 varchar(64),
  unique key (col1)
);

insert into t2 values (0, 'ab', 'a-b');
--echo # The following will not produce an error:
insert into t2 values (1, 'a ', 'a-space');
insert into t2 values (2, 'a',  'a');
select pk, col1, hex(col1), col2 from t2;

--echo # Check the format version:
select table_name,index_name,kv_format_version 
from information_schema.ROCKSDB_DDL 
where TABLE_SCHEMA=database() AND table_name in ('t1','t2');

flush tables;
set session debug= '-d,MYROCKS_FORMAT_VERSION_INITIAL';
select pk, hex(pk), col1 from t1;
select pk, col1, hex(col1), col2 from t2;

## Check that we can still read the data when starting on the old datadir:
--source include/restart_mysqld.inc

select pk, hex(pk), col1 from t1;
select pk, col1, hex(col1), col2 from t2;

drop table t1,t2;


--echo #
--echo # General upgrade tests to see that they work.
--echo #
set session debug= '+d,MYROCKS_FORMAT_VERSION_INITIAL';
create table t2 (
  id int primary key,
  col1 varchar(64) collate latin1_swedish_ci,
  unique key (col1)
) engine=rocksdb;
set session debug= '-d,MYROCKS_FORMAT_VERSION_INITIAL';

insert into t2 values (1, 'a');
insert into t2 values (2, 'b');
insert into t2 values (3, 'c');
# Check if this is indeed the old format
insert into t2 values (4, 'c ');
select col1 from t2;
delete from t2 where id = 4;
alter table t2 engine=rocksdb;
select col1 from t2;
# Check if this is indeed the new format
--error ER_DUP_ENTRY
insert into t2 values (4, 'c ');
drop table t2;

set session debug= '+d,MYROCKS_FORMAT_VERSION_INITIAL';
create table t2 (
  id int primary key,
  col1 varchar(64) collate latin1_bin,
  unique key (col1)
) engine=rocksdb;
set session debug= '-d,MYROCKS_FORMAT_VERSION_INITIAL';

insert into t2 values (1, 'a');
insert into t2 values (2, 'b');
insert into t2 values (3, 'c');
# Check if this is indeed the old format
insert into t2 values (4, 'c ');
select col1 from t2;
delete from t2 where id = 4;
alter table t2 engine=rocksdb;
select col1 from t2;
# Check if this is indeed the new format
--error ER_DUP_ENTRY
insert into t2 values (4, 'c ');
drop table t2;

--echo #
--echo # Check what happens when one tries to 'upgrade' to the new data format
--echo # and causes a unique key violation:
--echo #
set session debug= '+d,MYROCKS_FORMAT_VERSION_INITIAL';
create table t2 (
  pk int not null primary key,
  col1 varchar(64) collate latin1_bin,
  col2 varchar(64),
  unique key (col1)
);

insert into t2 values (1, 'a ', 'a-space');
insert into t2 values (2, 'a',  'a');

select * from t2;
set session debug= '-d,MYROCKS_FORMAT_VERSION_INITIAL';

--error ER_DUP_ENTRY
alter table t2 engine=rocksdb;
drop table t2;

